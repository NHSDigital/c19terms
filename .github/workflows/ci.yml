name: publish package

on:
  push:
    tags:
      - '*'

jobs:
  build:
    name: build-and-publish
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8.2'

      - name: setup node
        uses: actions/setup-node@v2
        with:
          node-version: '14.x'
          registry-url: 'https://registry.npmjs.org'

      - name: install poetry
        uses: Gr1N/setup-poetry@v7

      - name: set package version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: set SPEC_VERSION env var
        run: echo ::set-env name=SPEC_VERSION::"v$(date -u --iso-8601=minutes | cut -c-16 | sed -e 's/[ :T\+\-]/./g')-$RELEASE_VERSION"
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true

      - name: build terms
        run: |
          make install
          make release

      - name: create release
        id: create_release
        uses: actions/create-release@v1
        continue-on-error: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: ${{ env.SPEC_VERSION }}

      - name: upload terms
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/terms.json
          asset_name: terms.json
          asset_content_type: application/json

      - name: publish npm package
        run: |
          cd npm
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: publish pip package
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages_dir: pip/dist/

